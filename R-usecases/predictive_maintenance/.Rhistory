library(devtools)
library(arimo)
# Connect to arimo server
arimo.connect('52.91.148.33', 16000, 'minhtran@arimo.com', 'arimoiscool')
# Load the original data set
hddDdf <- arimo.getDDF('ddf://adatao/hdd')
# Filter necessary columns/rows
filterDdf <- hddDdf[hddDdf$column2 == 'Hitachi HDS5C3030ALA630',
c('column0', 'column1', 'column2', 'column3', 'column4',
'column6', 'column14', 'column20', 'column50','column56')]
colnames(filterDdf) <- c('datetime', 'serial', 'modelname', 'capacity',
'failure', 'error', 'reallocate', 'power',
'temparature', 'pending')
# Create the final transformed DDF
addDayToDdfData <- arimo.transform(filterDdf, method='R',
'datetime0 = as.Date(datetime) + 0',
'datetime1 = as.Date(datetime) + 1',
'datetime_1 = as.Date(datetime) - 1')
joinYesterdayToday <- arimo.join(addDayToDdfData, addDayToDdfData,
by.x=c('serial', 'datetime1'),
by.y=c('serial', 'datetime0'),
type='inner')
colnames(addDayToDdfData)[c(1:length(colnames(addDayToDdfData)))] <-
paste('r', colnames(addDayToDdfData), sep='_')
finalDdf <- arimo.join(joinYesterdayToday,
addDayToDdfData,
by.x=c('serial', 'datetime1'),
by.y=c('r_serial', 'r_datetime_1'),
type='inner')
# Create the final train/test data sets
trainDdf <- arimo.sql2ddf("select * from finalDdf where r_datetime < '2014-09-01'")
testDdf <- arimo.sql2ddf("select * from finalDdf where r_datetime >= '2014-09-01'")
upSampleTrainDdf <- trainDdf[trainDdf$r_r_failure == 1, ]
arimo.setDDFName(finalDdf, 'finalDdf')
# Create the final train/test data sets
trainDdf <- arimo.sql2ddf("select * from finalDdf where r_datetime < '2014-09-01'")
testDdf <- arimo.sql2ddf("select * from finalDdf where r_datetime >= '2014-09-01'")
upSampleTrainDdf <- trainDdf[trainDdf$r_r_failure == 1, ]
nrow(upSampleTrainDdf)
nrow(trainDdf)
2049768 / 42
upSampleTrainDdf <- arimo.sample2ddf(upSampleTrainDdf, 48800, replace=FALSE)
library(TTR)
library(devtools)
devtools::install_github("adatao/RClient", subdir="arimo",ref="master", auth_token="26b8eadc91cf008a577073af48719457826b8c4c")
upSampleTrainDdf <- arimo.sample2ddf(upSampleTrainDdf, 48800, replace=FALSE)
library(arimo)
upSampleTrainDdf <- arimo.sample2ddf(upSampleTrainDdf, 48800, replace=FALSE)
upSampleTrainDdf <- arimo.sample2ddf(upSampleTrainDdf, 48800, replace=TRUE)
library(arimo)
# Connect to arimo server
arimo.connect('52.91.148.33', 16000, 'minhtran@arimo.com', 'arimoiscool')
trainDdf <- arimo.sql2ddf("select * from finalDdf where r_datetime < '2014-09-01'")
testDdf <- arimo.sql2ddf("select * from finalDdf where r_datetime >= '2014-09-01'")
upSampleTrainDdf <- trainDdf[trainDdf$r_r_failure == 1, ]
upSampleTrainDdf <- arimo.sample2ddf(upSampleTrainDdf, 48800, replace=TRUE)
nrow(upSampleTrainDdf)
finalTrainDdf <- arimo.rbind(trainDdf, upSampleTrainDdf)
# Train the model
trainFormula <- formula('r_r_failure ~ r_temperature + r_reallocate + r_pending')
model <- arimo.glm.gd(formula=trainFormula, data=finalTrainDdf,
learningRate=0.001, numIterations=85,
regularized="ridge", lambda=0.02789616,
initialWeights=NULL, ref.levels=NULL)
head(finalTrainDdf, 10)
trainFormula <- formula('r_r_failure ~ r_temparature + r_reallocate + r_pending')
model <- arimo.glm.gd(formula=trainFormula, data=finalTrainDdf,
learningRate=0.001, numIterations=85,
regularized="ridge", lambda=0.02789616,
initialWeights=NULL, ref.levels=NULL)
testResult <- arimo.predict(model, testDdf)
hiveStr <- paste0("yPredictLabel = if(yPredict > ", 0.9, ", 1, 0)")
finalTestResult <- eval(call("adatao.transform", testResult, 'Hive', hiveStr))
print(arimo.xtabs(~ ytrue + yPredictLabel, finalTestResult))
finalTestResult <- eval(call("arimo.transform", testResult, 'Hive', hiveStr))
finalTestResult <- eval(call("arimo.transform", testResult, 'SQL', hiveStr))
hiveStr <- paste0("if(yPredict > ", 0.9, ", 1, 0)")
finalTestResult <- eval(call("arimo.transform", testResult, 'SQL', yPredictLabel = hiveStr))
print(arimo.xtabs(~ ytrue + yPredictLabel, finalTestResult))
10752 / 531147
testResulr
testResult
testResult[testResult$ytrue == 1, ]
head(testResult[testResult$ytrue == 1, ], 20)
upSampleTrainDdf <- arimo.sql2ddf("select * from {1} where r_reallocated_sectors_count + r_current_pending_sector_count > 12", ddfList = list(upSampleTrainDdf))
upSampleTrainDdf <- arimo.sql2ddf("select * from {1} where r_reallocate + r_pending > 12", ddfList = list(upSampleTrainDdf))
nrow(upSampleTrainDdf)
upSampleTrainDdf <- trainDdf[trainDdf$r_r_failure == 1, ]
upSampleTrainDdf <- arimo.sql2ddf("select * from {1} where r_reallocate + r_pending > 12", ddfList = list(upSampleTrainDdf))
upSampleTrainDdf <- arimo.sample2ddf(upSampleTrainDdf, 40000, replace=TRUE)
nrow(upSampleTrainDdf)
finalTrainDdf <- arimo.rbind(trainDdf, upSampleTrainDdf)
# Train the model
trainFormula <- formula('r_r_failure ~ r_temparature + r_reallocate + r_pending')
model <- arimo.glm.gd(formula=trainFormula, data=finalTrainDdf,
learningRate=0.001, numIterations=85,
regularized="ridge", lambda=0.02789616,
initialWeights=NULL, ref.levels=NULL)
# Test the model
testResult <- arimo.predict(model, testDdf)
head(testResult[testResult$ytrue == 1, ], 20)
hiveStr <- paste0("if(yPredict > ", 0.999, ", 1, 0)")
finalTestResult <- eval(call("arimo.transform", testResult, 'SQL', yPredictLabel = hiveStr))
print(arimo.xtabs(~ ytrue + yPredictLabel, finalTestResult))
5790/536109
load("FinalDailyFeatures_5_2.RData")
ls()
getwd()
setwd('/Users/minhtran/tmp/Report21Apr2016')
load("FinalDailyFeatures_5_2.RData")
load("FinalDailyFeatures.RData")
head(featureSet)
names(featureSet)
x <- names(featureSet)
nzchar(x)
x
f1 <- featureSet[c(1,3,4,6)]
f1
head(f1)
foo <- list(a = 1, b = list(c = "a", d = FALSE))
bar <- modifyList(foo, list(e = 2, b = list(d = TRUE)))
str(foo)
str(bar)
str(featureSet)
featureSet$AvgTimeBetweenPurchases[which(featureSet$AvgTimeBetweenPurchases=="NaN")]<-0
featureSet<-modifyList(featureSet, lapply(featureSet,as.numeric))
str(featureSet)
library(caret)
library(stats)
library(caretEnsemble)
library(DMwR)
library(pROC)
library(rpart)
library(performanceEstimation)
library(ROCR)
install.packages("caretEnsemble")
install.packages("DMwR")
install.packages("pROC")
install.packages("performanceEstimation")
install.packages(ROCR)
install.packages("ROCR")
library(caretEnsemble)
library(DMwR)
library(pROC)
library(rpart)
library(performanceEstimation)
library(ROCR)
finalSet<-featureSet
names(finalSet)
featureSet$Labels
unique(featureSet$Labels)
folds=createFolds(factor(featureSet$Labels), k = 10, returnTrain=TRUE)
folds
str(folds)
len(featureSet$Labels)
length(featureSet$Labels)
library(caret)
library(stats)
library(caretEnsemble)
library(DMwR)
library(pROC)
library(rpart)
library(performanceEstimation)
library(ROCR)
getwd()
setwd('/Users/minhtran/tmp/Report21Apr2016')
load("FinalDailyFeatures.RData")
rm(list = ls())
load("FinalDailyFeatures.RData")
featureSet$AvgTimeBetweenPurchases[which(featureSet$AvgTimeBetweenPurchases=="NaN")]<-0
featureSet<-modifyList(featureSet, lapply(featureSet,as.numeric))
head(featureSet)
featureSet$predictions
names(featureSet)
featureSet$AvgTimeBetweenPurchases[which(featureSet$AvgTimeBetweenPurchases=="NaN")]<-0
featureSet<-modifyList(featureSet, lapply(featureSet,as.numeric))
finalSet$predictions<-rep(NA,nrow(finalSet))
finalSet<-featureSet
finalSet<-featureSet
finalSet$predictions<-rep(NA,nrow(finalSet))
names(finalSet)
head(finalSet)
folds=createFolds(factor(featureSet$Labels), k = 10, returnTrain=TRUE)
folds
str(folds)
31106/10 * 9
sample(10, 20)
sample(10, 10)
nrows(featureSet[which(featureSet$Labels == 1)])
nrow(featureSet[which(featureSet$Labels == 1)])
nrow(featureSet[which(featureSet$Labels == 1), ])
nrow(featureSet[which(featureSet$Labels == 0), ])
finalSet<-featureSet
finalSet$predictions<-rep(NA,nrow(finalSet))
set.seed(1234)
folds=createFolds(factor(featureSet$Labels), k = 10, returnTrain=TRUE)
# library(plyr)
# featureSet$fold <- folds
# ddply(featureSet, 'fold', summarise, prop=mean(Labels))
for (fold in folds){
trainingData<-featureSet[fold,]
testData<-featureSet[-fold,]
ones<-trainingData[which(trainingData$Labels==1),]
zeros<-trainingData[which(trainingData$Labels==0),]
allPreds<-data.frame()
# allBags<-data.frame()
for (i in 1:10){
sampleInd<-sample(nrow(zeros), nrow(ones))
sampledZeros<-zeros[sampleInd, ]
trainingDataNew<-rbind(ones,sampledZeros)
trainingDataNew$Labels<-as.numeric(trainingDataNew$Labels)
model <- glm(Labels ~.,data=trainingDataNew, family = binomial(link = 'logit'))
preds <- predict(model,testData,type = "response")
allPreds<-rbind(allPreds,preds)
# allBags<-rbind(allBags,trainingDataNew)
zeros<-zeros[-sampleInd,]
}
finalPreds<-colMeans(allPreds)
finalPreds<-ifelse(finalPreds<0.5,0,1)
finalSet$predictions[-fold]<-finalPreds
}
finalSet<-modifyList(finalSet, lapply(finalSet,as.character))
cfMat<-confusionMatrix(finalSet$predictions,finalSet$Labels,positive = "1")
cfMat
a<- roc(as.numeric(finalSet$predictions), as.numeric(finalSet$Labels))
a
pr= prediction(as.numeric(finalSet$predictions) ,as.numeric(finalSet$Labels))
pr
perf <- performance(pr, measure = "tpr", x.measure = "fpr")
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
plot(perf,col="red", main="ENSEMBLE")
minauc<-min(round(auc, digits = 2))
minauct <- paste(c("AUC  = "),minauc,sep="")
legend(0.6,0.4,c(minauct,"\n"),border="white",cex=1,box.col = "white")
abline(a=0, b= 1)
a
auc <- performance(pr, measure = "auc")
auc
auc[[1]]
str(auc)
auc[1]
auc@y.name
auc@alpha.values
auc@y.values
str(a)
a$auc
a<- roc(as.numeric(finalSet$predictions), as.numeric(finalSet$Labels), print.thres = 0)
a
a<- roc(as.numeric(finalSet$predictions), as.numeric(finalSet$Labels), print.thres = 0.1)
a
a<- roc(as.numeric(finalSet$predictions), as.numeric(finalSet$Labels), print.thres = 0.3)
a
auc
head(finalSet)
FullDataset<-modifyList(featureSet, lapply(featureSet,as.character))
IgnoreFeatures <- c('AvgTimeBetweenPurchases','CustomerID')
FullDataset[,IgnoreFeatures] <- list(NULL)
combined_rb_predictions <- data.frame()
combined_rb_prob <- data.frame()
FullDataset <- as.data.frame(lapply(FullDataset,as.numeric))
Distribution.table <- prop.table(table(FullDataset$Labels))
Distribution.table
data(iris)
data <- iris[, c(1, 2, 5)]
data$Species <- factor(ifelse(data$Species == "setosa","rare","common"))
## checking the class distribution of this artificial data set
table(data$Species)
## now using SMOTE to create a more "balanced problem"
newData <- smote(Species ~ ., data, perc.over = 6,perc.under=1)
table(newData$Species)
folds <- createFolds(FullDataset$Labels, k = 10, list = TRUE, returnTrain = FALSE)
folds
str(folds)
rm(list= ls())
load('FinalDailyFeatures.Rdata')
FullDataset<-modifyList(featureSet, lapply(featureSet,as.character))
IgnoreFeatures <- c('AvgTimeBetweenPurchases','CustomerID')
FullDataset[,IgnoreFeatures] <- list(NULL)
combined_rb_predictions <- data.frame()
combined_rb_prob <- data.frame()
FullDataset <- as.data.frame(lapply(FullDataset,as.numeric))
# create indices for 10 folds
set.seed(1234)
Distribution.table <- prop.table(table(FullDataset$Labels))
folds <- createFolds(FullDataset$Labels, k = 10, list = TRUE, returnTrain = FALSE)
iter <- 1
FullDataset$Labels = factor(FullDataset$Labels)
for (fold in folds) {
# display iteration number
print (iter)
iter <- iter + 1
training <- FullDataset[-fold, ]
testing <- FullDataset[fold, ]
newData <- smote(Labels ~ ., training, perc.over = 1,perc.under=2)
GLMModel <-  glm(Labels ~ ., data= newData,family = binomial(link='logit'))
glmPreds <- predict(GLMModel, newdata = testing,type = 'response')
glmPreds[glmPreds>0.5]=1
glmPreds[glmPreds<0.5]=0
print(table(glmPreds))
print(table(testing$Labels))
combined_rb_predictions <- rbind(combined_rb_predictions, data.frame(pred=as.factor(glmPreds),
obs=as.factor(testing$Labels),
fold = fold))
}
conf = confusionMatrix(combined_rb_predictions$pred, combined_rb_predictions$obs,positive = "1")
conf
a<- roc(as.numeric(combined_rb_predictions$pred), as.numeric(combined_rb_predictions$obs))
pr= prediction(as.numeric(combined_rb_predictions$pred) ,as.numeric(combined_rb_predictions$obs))
perf <- performance(pr, measure = "tpr", x.measure = "fpr")
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
plot(perf,col="red", main="SMOTE")
# calculating AUC
auc <- unlist(slot(auc, "y.values"))
# adding min and max ROC AUC to the center of the plot
minauc<-min(round(auc, digits = 2))
minauct <- paste(c("AUC  = "),minauc,sep="")
legend(0.6,0.4,c(minauct,"\n"),border="white",cex=1,box.col = "white")
abline(a=0, b= 1)
rm(list=ls())
load('FinalDailyFeatures.Rdata')
FullDataset<-modifyList(featureSet, lapply(featureSet,as.character))
IgnoreFeatures <- c('AvgTimeBetweenPurchases','CustomerID')
FullDataset[,IgnoreFeatures] <- list(NULL)
combined_rb_predictions <- data.frame()
combined_rb_prob <- data.frame()
FullDataset <- as.data.frame(lapply(FullDataset,as.numeric))
# create indices for 10 folds
set.seed(1234)
Distribution.table <- prop.table(table(FullDataset$Labels))
folds <- createFolds(FullDataset$Labels, k = 10, list = TRUE, returnTrain = FALSE)
iter <- 1
FullDataset$Labels = factor(FullDataset$Labels)
for (fold in folds) {
# display iteration number
print (iter)
iter <- iter + 1
training <- FullDataset[-fold, ]
testing <- FullDataset[fold, ]
newData <- smote(Labels ~ ., training, perc.over = 1,perc.under=2)
X= newData[,(1:ncol(newData)-1)]
y= newData$Label
#GLMModel <-  train(Labels ~ ., data= newData,method = "xgbTree")
GLMModel <-  train(Labels ~ ., data= newData,method = "rf")
glmPreds <- predict(GLMModel, testing)
print(table(glmPreds))
print(table(testing$Labels))
combined_rb_predictions <- rbind(combined_rb_predictions, data.frame(pred=as.factor(glmPreds),
obs=as.factor(testing$Labels),
fold = fold))
}
library(rusboost)
install.packages('rusboost')
library(rusboost)

{
    "contents" : "library(caret)\nlibrary(stats)\nlibrary(caretEnsemble)\nlibrary(DMwR)\nlibrary(pROC)\nlibrary(rpart)\nlibrary(performanceEstimation)\nlibrary(ROCR)\n\n\npath = \"F:\\\\Kohl's\\\\Rcodes\\\\Final Code\\\\\"\nsetwd(path)\nload(\"FinalDailyFeatures_5_2.RData\")\nfeatureSet$AvgTimeBetweenPurchases[which(featureSet$AvgTimeBetweenPurchases==\"NaN\")]<-0\nfeatureSet<-modifyList(featureSet, lapply(featureSet,as.numeric))\nfinalSet<-featureSet\nfinalSet$predictions<-rep(NA,nrow(finalSet))\n\nset.seed(1234)\nfolds=createFolds(factor(featureSet$Labels), k = 10, returnTrain=TRUE)\n# library(plyr)\n# featureSet$fold <- folds\n# ddply(featureSet, 'fold', summarise, prop=mean(Labels))\nfor (fold in folds){\n  trainingData<-featureSet[fold,]\n  testData<-featureSet[-fold,]\n  ones<-trainingData[which(trainingData$Labels==1),]\n  zeros<-trainingData[which(trainingData$Labels==0),]\n  \n  allPreds<-data.frame()\n  # allBags<-data.frame()\n  for (i in 1:10){\n    sampleInd<-sample(nrow(zeros), nrow(ones))\n    sampledZeros<-zeros[sampleInd, ]\n    trainingDataNew<-rbind(ones,sampledZeros)\n    trainingDataNew$Labels<-as.numeric(trainingDataNew$Labels)\n    \n    \n    model <- glm(Labels ~.,data=trainingDataNew, family = binomial(link = 'logit'))\n    preds <- predict(model,testData,type = \"response\")\n    allPreds<-rbind(allPreds,preds)\n    # allBags<-rbind(allBags,trainingDataNew)\n    zeros<-zeros[-sampleInd,]\n  }\n  finalPreds<-colMeans(allPreds)\n  finalPreds<-ifelse(finalPreds<0.5,0,1)\n  finalSet$predictions[-fold]<-finalPreds\n  # x<-nrow(ones)*2\n#   model1 <- glm(Labels ~.,data=allBags[1:x,], family = binomial(link = 'logit'))\n#   model2 <- glm(Labels ~.,data=allBags[(x+1):x*2,], family = binomial(link = 'logit'))\n#   model3 <- glm(Labels ~.,data=allBags[(x*2+1):x*3,], family = binomial(link = 'logit'))\n#   model4 <- glm(Labels ~.,data=allBags[(x*3+1):x*4,], family = binomial(link = 'logit'))\n#   model5 <- glm(Labels ~.,data=allBags[(x*4+1):x*5,], family = binomial(link = 'logit'))\n#   model6 <- glm(Labels ~.,data=allBags[(x*5+1):x*6,], family = binomial(link = 'logit'))\n#   model7 <- glm(Labels ~.,data=allBags[(x*6+1):x*7,], family = binomial(link = 'logit'))\n#   model8 <- glm(Labels ~.,data=allBags[(x*7+1):x*8,], family = binomial(link = 'logit'))\n#   model9 <- glm(Labels ~.,data=allBags[(x*8+1):x*9,], family = binomial(link = 'logit'))\n#   model10 <- glm(Labels ~.,data=allBags[(x*9+1):x*10,], family = binomial(link = 'logit'))\n  \n#   model1 <- train(allBags[1:x,1:(ncol(allBags)-1)],allBags[1:x,ncol(allBags)],method = \"glm\")\n#   model2 <- train(allBags[(x+1):x*2,1:(ncol(allBags)-1)],allBags[(x+1):x*2,ncol(allBags)],method = \"glm\")\n#   model3 <- train(allBags[(x*2+1):x*3,1:(ncol(allBags)-1)],allBags[(x*2+1):x*3,ncol(allBags)],method = \"glm\")\n#   model4 <- train(allBags[(x*3+1):x*4,1:(ncol(allBags)-1)],allBags[(x*3+1):x*4,ncol(allBags)],method = \"glm\")\n#   model5 <- train(allBags[(x*4+1):x*5,1:(ncol(allBags)-1)],allBags[(x*4+1):x*5,ncol(allBags)],method = \"glm\")\n#   model6 <- train(allBags[(x*5+1):x*6,1:(ncol(allBags)-1)],allBags[(x*5+1):x*6,ncol(allBags)],method = \"glm\")\n#   model7 <- train(allBags[(x*6+1):x*7,1:(ncol(allBags)-1)],allBags[(x*6+1):x*7,ncol(allBags)],method = \"glm\")\n#   model8 <- train(allBags[(x*7+1):x*8,1:(ncol(allBags)-1)],allBags[(x*7+1):x*8,ncol(allBags)],method = \"glm\")\n#   model9 <- train(allBags[(x*8+1):x*9,1:(ncol(allBags)-1)],allBags[(x*8+1):x*9,ncol(allBags)],method = \"glm\")\n#   model10 <- train(allBags[(x*9+1):x*10,1:(ncol(allBags)-1)],allBags[(x*9+1):x*10,ncol(allBags)],method = \"glm\")\n#   all.models<-list(model1,model2)\n#   xx<-caretList(methodList = all.models)\n#   model<-caretEnsemble(model1)\n}\nfinalSet<-modifyList(finalSet, lapply(finalSet,as.character))\ncfMat<-confusionMatrix(finalSet$predictions,finalSet$Labels,positive = \"1\")\n\n\n\na<- roc(as.numeric(finalSet$predictions), as.numeric(finalSet$Labels))\npr= prediction(as.numeric(finalSet$predictions) ,as.numeric(finalSet$Labels))\nperf <- performance(pr, measure = \"tpr\", x.measure = \"fpr\")\nauc <- performance(pr, measure = \"auc\")\nauc <- auc@y.values[[1]]\nauc\n\n\n\nplot(perf,col=\"red\", main=\"ENSEMBLE\")\n\n# calculating AUC\n# auc <- unlist(slot(auc, \"y.values\"))\n# adding min and max ROC AUC to the center of the plot\nminauc<-min(round(auc, digits = 2))\nminauct <- paste(c(\"AUC  = \"),minauc,sep=\"\")\nlegend(0.6,0.4,c(minauct,\"\\n\"),border=\"white\",cex=1,box.col = \"white\")\nabline(a=0, b= 1)\n\n",
    "created" : 1462185462888.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "540492600",
    "id" : "2DE92D71",
    "lastKnownWriteTime" : 1461232304,
    "path" : "~/tmp/Report21Apr2016/EnsembleModel.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}